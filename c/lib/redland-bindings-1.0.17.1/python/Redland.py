# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Redland')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Redland')
    _Redland = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Redland', [dirname(__file__)])
        except ImportError:
            import _Redland
            return _Redland
        try:
            _mod = imp.load_module('_Redland', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Redland = swig_import_helper()
    del swig_import_helper
else:
    import _Redland
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def librdf_new_digest(world, name):
    return _Redland.librdf_new_digest(world, name)
librdf_new_digest = _Redland.librdf_new_digest

def librdf_free_digest(digest):
    return _Redland.librdf_free_digest(digest)
librdf_free_digest = _Redland.librdf_free_digest

def librdf_digest_init(digest):
    return _Redland.librdf_digest_init(digest)
librdf_digest_init = _Redland.librdf_digest_init

def librdf_digest_update(digest, buf, length):
    return _Redland.librdf_digest_update(digest, buf, length)
librdf_digest_update = _Redland.librdf_digest_update

def librdf_digest_update_string(digest, string):
    return _Redland.librdf_digest_update_string(digest, string)
librdf_digest_update_string = _Redland.librdf_digest_update_string

def librdf_digest_final(digest):
    return _Redland.librdf_digest_final(digest)
librdf_digest_final = _Redland.librdf_digest_final

def librdf_digest_to_string(digest):
    return _Redland.librdf_digest_to_string(digest)
librdf_digest_to_string = _Redland.librdf_digest_to_string

def librdf_new_hash(world, name):
    return _Redland.librdf_new_hash(world, name)
librdf_new_hash = _Redland.librdf_new_hash

def librdf_new_hash_from_string(world, name, string):
    return _Redland.librdf_new_hash_from_string(world, name, string)
librdf_new_hash_from_string = _Redland.librdf_new_hash_from_string

def librdf_new_hash_from_array_of_strings(world, name, string):
    return _Redland.librdf_new_hash_from_array_of_strings(world, name, string)
librdf_new_hash_from_array_of_strings = _Redland.librdf_new_hash_from_array_of_strings

def librdf_hash_to_string(hash, filter):
    return _Redland.librdf_hash_to_string(hash, filter)
librdf_hash_to_string = _Redland.librdf_hash_to_string

def librdf_free_hash(hash):
    return _Redland.librdf_free_hash(hash)
librdf_free_hash = _Redland.librdf_free_hash

def librdf_new_world():
    return _Redland.librdf_new_world()
librdf_new_world = _Redland.librdf_new_world

def librdf_free_world(world):
    return _Redland.librdf_free_world(world)
librdf_free_world = _Redland.librdf_free_world

def librdf_world_open(world):
    return _Redland.librdf_world_open(world)
librdf_world_open = _Redland.librdf_world_open

def librdf_world_get_feature(world, feature):
    return _Redland.librdf_world_get_feature(world, feature)
librdf_world_get_feature = _Redland.librdf_world_get_feature

def librdf_world_set_feature(world, feature, value):
    return _Redland.librdf_world_set_feature(world, feature, value)
librdf_world_set_feature = _Redland.librdf_world_set_feature

def librdf_parser_get_accept_header(parser):
    return _Redland.librdf_parser_get_accept_header(parser)
librdf_parser_get_accept_header = _Redland.librdf_parser_get_accept_header

def librdf_world_set_logger(world, user_data, log_handler):
    return _Redland.librdf_world_set_logger(world, user_data, log_handler)
librdf_world_set_logger = _Redland.librdf_world_set_logger

def librdf_free_iterator(arg1):
    return _Redland.librdf_free_iterator(arg1)
librdf_free_iterator = _Redland.librdf_free_iterator

def librdf_iterator_end(iterator):
    return _Redland.librdf_iterator_end(iterator)
librdf_iterator_end = _Redland.librdf_iterator_end

def librdf_iterator_get_object(iterator):
    return _Redland.librdf_iterator_get_object(iterator)
librdf_iterator_get_object = _Redland.librdf_iterator_get_object

def librdf_iterator_get_context(iterator):
    return _Redland.librdf_iterator_get_context(iterator)
librdf_iterator_get_context = _Redland.librdf_iterator_get_context

def librdf_iterator_next(iterator):
    return _Redland.librdf_iterator_next(iterator)
librdf_iterator_next = _Redland.librdf_iterator_next

def librdf_new_uri(world, string):
    return _Redland.librdf_new_uri(world, string)
librdf_new_uri = _Redland.librdf_new_uri

def librdf_new_uri_from_uri(uri):
    return _Redland.librdf_new_uri_from_uri(uri)
librdf_new_uri_from_uri = _Redland.librdf_new_uri_from_uri

def librdf_new_uri_from_filename(world, filename):
    return _Redland.librdf_new_uri_from_filename(world, filename)
librdf_new_uri_from_filename = _Redland.librdf_new_uri_from_filename

def librdf_free_uri(uri):
    return _Redland.librdf_free_uri(uri)
librdf_free_uri = _Redland.librdf_free_uri

def librdf_uri_to_string(uri):
    return _Redland.librdf_uri_to_string(uri)
librdf_uri_to_string = _Redland.librdf_uri_to_string

def librdf_uri_equals(first_uri, second_uri):
    return _Redland.librdf_uri_equals(first_uri, second_uri)
librdf_uri_equals = _Redland.librdf_uri_equals

def librdf_uri_compare(first_uri, second_uri):
    return _Redland.librdf_uri_compare(first_uri, second_uri)
librdf_uri_compare = _Redland.librdf_uri_compare

def librdf_new_node(world):
    return _Redland.librdf_new_node(world)
librdf_new_node = _Redland.librdf_new_node

def librdf_new_node_from_uri_string(world, string):
    return _Redland.librdf_new_node_from_uri_string(world, string)
librdf_new_node_from_uri_string = _Redland.librdf_new_node_from_uri_string

def librdf_new_node_from_uri(world, uri):
    return _Redland.librdf_new_node_from_uri(world, uri)
librdf_new_node_from_uri = _Redland.librdf_new_node_from_uri

def librdf_new_node_from_uri_local_name(world, uri, local_name):
    return _Redland.librdf_new_node_from_uri_local_name(world, uri, local_name)
librdf_new_node_from_uri_local_name = _Redland.librdf_new_node_from_uri_local_name

def librdf_new_node_from_normalised_uri_string(world, uri_string, source_uri, base_uri):
    return _Redland.librdf_new_node_from_normalised_uri_string(world, uri_string, source_uri, base_uri)
librdf_new_node_from_normalised_uri_string = _Redland.librdf_new_node_from_normalised_uri_string

def librdf_new_node_from_literal(world, string, inStrOrNull=None, is_wf_xml=0):
    return _Redland.librdf_new_node_from_literal(world, string, inStrOrNull, is_wf_xml)
librdf_new_node_from_literal = _Redland.librdf_new_node_from_literal

def librdf_new_node_from_typed_literal(world, string, inStrOrNull=None, inUriOrNull=None):
    return _Redland.librdf_new_node_from_typed_literal(world, string, inStrOrNull, inUriOrNull)
librdf_new_node_from_typed_literal = _Redland.librdf_new_node_from_typed_literal

def librdf_new_node_from_node(node):
    return _Redland.librdf_new_node_from_node(node)
librdf_new_node_from_node = _Redland.librdf_new_node_from_node

def librdf_new_node_from_blank_identifier(world, inStrOrNull=None):
    return _Redland.librdf_new_node_from_blank_identifier(world, inStrOrNull)
librdf_new_node_from_blank_identifier = _Redland.librdf_new_node_from_blank_identifier

def librdf_free_node(r):
    return _Redland.librdf_free_node(r)
librdf_free_node = _Redland.librdf_free_node

def librdf_node_get_uri(node):
    return _Redland.librdf_node_get_uri(node)
librdf_node_get_uri = _Redland.librdf_node_get_uri

def librdf_node_get_type(node):
    return _Redland.librdf_node_get_type(node)
librdf_node_get_type = _Redland.librdf_node_get_type

def librdf_node_get_literal_value(node):
    return _Redland.librdf_node_get_literal_value(node)
librdf_node_get_literal_value = _Redland.librdf_node_get_literal_value

def librdf_node_get_literal_value_as_latin1(node):
    return _Redland.librdf_node_get_literal_value_as_latin1(node)
librdf_node_get_literal_value_as_latin1 = _Redland.librdf_node_get_literal_value_as_latin1

def librdf_node_get_literal_value_language(node):
    return _Redland.librdf_node_get_literal_value_language(node)
librdf_node_get_literal_value_language = _Redland.librdf_node_get_literal_value_language

def librdf_node_get_literal_value_datatype_uri(node):
    return _Redland.librdf_node_get_literal_value_datatype_uri(node)
librdf_node_get_literal_value_datatype_uri = _Redland.librdf_node_get_literal_value_datatype_uri

def librdf_node_get_literal_value_is_wf_xml(node):
    return _Redland.librdf_node_get_literal_value_is_wf_xml(node)
librdf_node_get_literal_value_is_wf_xml = _Redland.librdf_node_get_literal_value_is_wf_xml

def librdf_node_get_li_ordinal(node):
    return _Redland.librdf_node_get_li_ordinal(node)
librdf_node_get_li_ordinal = _Redland.librdf_node_get_li_ordinal

def librdf_node_to_string(node):
    return _Redland.librdf_node_to_string(node)
librdf_node_to_string = _Redland.librdf_node_to_string

def librdf_node_get_blank_identifier(node):
    return _Redland.librdf_node_get_blank_identifier(node)
librdf_node_get_blank_identifier = _Redland.librdf_node_get_blank_identifier

def librdf_node_is_resource(node):
    return _Redland.librdf_node_is_resource(node)
librdf_node_is_resource = _Redland.librdf_node_is_resource

def librdf_node_is_literal(node):
    return _Redland.librdf_node_is_literal(node)
librdf_node_is_literal = _Redland.librdf_node_is_literal

def librdf_node_is_blank(node):
    return _Redland.librdf_node_is_blank(node)
librdf_node_is_blank = _Redland.librdf_node_is_blank

def librdf_node_equals(first_node, second_node):
    return _Redland.librdf_node_equals(first_node, second_node)
librdf_node_equals = _Redland.librdf_node_equals

def librdf_new_statement(world):
    return _Redland.librdf_new_statement(world)
librdf_new_statement = _Redland.librdf_new_statement

def librdf_new_statement_from_statement(statement):
    return _Redland.librdf_new_statement_from_statement(statement)
librdf_new_statement_from_statement = _Redland.librdf_new_statement_from_statement

def librdf_new_statement_from_nodes(world, subject, predicate, object):
    return _Redland.librdf_new_statement_from_nodes(world, subject, predicate, object)
librdf_new_statement_from_nodes = _Redland.librdf_new_statement_from_nodes

def librdf_free_statement(statement):
    return _Redland.librdf_free_statement(statement)
librdf_free_statement = _Redland.librdf_free_statement

def librdf_statement_get_subject(statement):
    return _Redland.librdf_statement_get_subject(statement)
librdf_statement_get_subject = _Redland.librdf_statement_get_subject

def librdf_statement_set_subject(statement, subject):
    return _Redland.librdf_statement_set_subject(statement, subject)
librdf_statement_set_subject = _Redland.librdf_statement_set_subject

def librdf_statement_get_predicate(statement):
    return _Redland.librdf_statement_get_predicate(statement)
librdf_statement_get_predicate = _Redland.librdf_statement_get_predicate

def librdf_statement_set_predicate(statement, predicate):
    return _Redland.librdf_statement_set_predicate(statement, predicate)
librdf_statement_set_predicate = _Redland.librdf_statement_set_predicate

def librdf_statement_get_object(statement):
    return _Redland.librdf_statement_get_object(statement)
librdf_statement_get_object = _Redland.librdf_statement_get_object

def librdf_statement_set_object(statement, object):
    return _Redland.librdf_statement_set_object(statement, object)
librdf_statement_set_object = _Redland.librdf_statement_set_object

def librdf_statement_equals(statement1, statement2):
    return _Redland.librdf_statement_equals(statement1, statement2)
librdf_statement_equals = _Redland.librdf_statement_equals

def librdf_statement_match(statement, partial_statement):
    return _Redland.librdf_statement_match(statement, partial_statement)
librdf_statement_match = _Redland.librdf_statement_match

def librdf_statement_to_string(statement):
    return _Redland.librdf_statement_to_string(statement)
librdf_statement_to_string = _Redland.librdf_statement_to_string

def librdf_statement_is_complete(statement):
    return _Redland.librdf_statement_is_complete(statement)
librdf_statement_is_complete = _Redland.librdf_statement_is_complete

def librdf_new_model(world, storage, options_string):
    return _Redland.librdf_new_model(world, storage, options_string)
librdf_new_model = _Redland.librdf_new_model

def librdf_new_model_with_options(world, storage, options):
    return _Redland.librdf_new_model_with_options(world, storage, options)
librdf_new_model_with_options = _Redland.librdf_new_model_with_options

def librdf_new_model_from_model(model):
    return _Redland.librdf_new_model_from_model(model)
librdf_new_model_from_model = _Redland.librdf_new_model_from_model

def librdf_free_model(model):
    return _Redland.librdf_free_model(model)
librdf_free_model = _Redland.librdf_free_model

def librdf_model_size(model):
    return _Redland.librdf_model_size(model)
librdf_model_size = _Redland.librdf_model_size

def librdf_model_add(model, subject, predicate, object):
    return _Redland.librdf_model_add(model, subject, predicate, object)
librdf_model_add = _Redland.librdf_model_add

def librdf_model_add_string_literal_statement(model, subject, predicate, literal, inStrOrNull=None, is_wf_xml=0):
    return _Redland.librdf_model_add_string_literal_statement(model, subject, predicate, literal, inStrOrNull, is_wf_xml)
librdf_model_add_string_literal_statement = _Redland.librdf_model_add_string_literal_statement

def librdf_model_add_typed_literal_statement(model, subject, predicate, string, inStrOrNull, inUriOrNull=None):
    return _Redland.librdf_model_add_typed_literal_statement(model, subject, predicate, string, inStrOrNull, inUriOrNull)
librdf_model_add_typed_literal_statement = _Redland.librdf_model_add_typed_literal_statement

def librdf_model_add_statement(model, statement):
    return _Redland.librdf_model_add_statement(model, statement)
librdf_model_add_statement = _Redland.librdf_model_add_statement

def librdf_model_add_statements(model, statement_stream):
    return _Redland.librdf_model_add_statements(model, statement_stream)
librdf_model_add_statements = _Redland.librdf_model_add_statements

def librdf_model_remove_statement(model, statement):
    return _Redland.librdf_model_remove_statement(model, statement)
librdf_model_remove_statement = _Redland.librdf_model_remove_statement

def librdf_model_contains_statement(model, statement):
    return _Redland.librdf_model_contains_statement(model, statement)
librdf_model_contains_statement = _Redland.librdf_model_contains_statement

def librdf_model_as_stream(model):
    return _Redland.librdf_model_as_stream(model)
librdf_model_as_stream = _Redland.librdf_model_as_stream

def librdf_model_find_statements(model, statement):
    return _Redland.librdf_model_find_statements(model, statement)
librdf_model_find_statements = _Redland.librdf_model_find_statements

def librdf_model_find_statements_in_context(model, statement, inNodeOrNull=None):
    return _Redland.librdf_model_find_statements_in_context(model, statement, inNodeOrNull)
librdf_model_find_statements_in_context = _Redland.librdf_model_find_statements_in_context

def librdf_model_get_sources(model, arc, target):
    return _Redland.librdf_model_get_sources(model, arc, target)
librdf_model_get_sources = _Redland.librdf_model_get_sources

def librdf_model_get_arcs(model, source, target):
    return _Redland.librdf_model_get_arcs(model, source, target)
librdf_model_get_arcs = _Redland.librdf_model_get_arcs

def librdf_model_get_targets(model, source, arc):
    return _Redland.librdf_model_get_targets(model, source, arc)
librdf_model_get_targets = _Redland.librdf_model_get_targets

def librdf_model_get_source(model, arc, target):
    return _Redland.librdf_model_get_source(model, arc, target)
librdf_model_get_source = _Redland.librdf_model_get_source

def librdf_model_get_arc(model, source, target):
    return _Redland.librdf_model_get_arc(model, source, target)
librdf_model_get_arc = _Redland.librdf_model_get_arc

def librdf_model_get_arcs_out(model, node):
    return _Redland.librdf_model_get_arcs_out(model, node)
librdf_model_get_arcs_out = _Redland.librdf_model_get_arcs_out

def librdf_model_get_arcs_in(model, node):
    return _Redland.librdf_model_get_arcs_in(model, node)
librdf_model_get_arcs_in = _Redland.librdf_model_get_arcs_in

def librdf_model_has_arc_in(model, node, property):
    return _Redland.librdf_model_has_arc_in(model, node, property)
librdf_model_has_arc_in = _Redland.librdf_model_has_arc_in

def librdf_model_has_arc_out(model, node, property):
    return _Redland.librdf_model_has_arc_out(model, node, property)
librdf_model_has_arc_out = _Redland.librdf_model_has_arc_out

def librdf_model_get_target(model, source, arc):
    return _Redland.librdf_model_get_target(model, source, arc)
librdf_model_get_target = _Redland.librdf_model_get_target

def librdf_model_context_add_statement(model, context, statement):
    return _Redland.librdf_model_context_add_statement(model, context, statement)
librdf_model_context_add_statement = _Redland.librdf_model_context_add_statement

def librdf_model_context_add_statements(model, context, stream):
    return _Redland.librdf_model_context_add_statements(model, context, stream)
librdf_model_context_add_statements = _Redland.librdf_model_context_add_statements

def librdf_model_context_remove_statement(model, context, statement):
    return _Redland.librdf_model_context_remove_statement(model, context, statement)
librdf_model_context_remove_statement = _Redland.librdf_model_context_remove_statement

def librdf_model_context_remove_statements(model, context):
    return _Redland.librdf_model_context_remove_statements(model, context)
librdf_model_context_remove_statements = _Redland.librdf_model_context_remove_statements

def librdf_model_context_as_stream(model, context):
    return _Redland.librdf_model_context_as_stream(model, context)
librdf_model_context_as_stream = _Redland.librdf_model_context_as_stream

def librdf_model_sync(model):
    return _Redland.librdf_model_sync(model)
librdf_model_sync = _Redland.librdf_model_sync

def librdf_model_get_contexts(model):
    return _Redland.librdf_model_get_contexts(model)
librdf_model_get_contexts = _Redland.librdf_model_get_contexts

def librdf_model_contains_context(model, context):
    return _Redland.librdf_model_contains_context(model, context)
librdf_model_contains_context = _Redland.librdf_model_contains_context

def librdf_model_get_feature(model, feature):
    return _Redland.librdf_model_get_feature(model, feature)
librdf_model_get_feature = _Redland.librdf_model_get_feature

def librdf_model_set_feature(model, feature, value):
    return _Redland.librdf_model_set_feature(model, feature, value)
librdf_model_set_feature = _Redland.librdf_model_set_feature

def librdf_model_load(model, uri, arg3=None, arg4=None, type_uri=None):
    return _Redland.librdf_model_load(model, uri, arg3, arg4, type_uri)
librdf_model_load = _Redland.librdf_model_load

def librdf_model_query_execute(model, query):
    return _Redland.librdf_model_query_execute(model, query)
librdf_model_query_execute = _Redland.librdf_model_query_execute

def librdf_model_to_string(model, uri, arg3=None, arg4=None, inUriOrNull=None):
    return _Redland.librdf_model_to_string(model, uri, arg3, arg4, inUriOrNull)
librdf_model_to_string = _Redland.librdf_model_to_string

def librdf_model_transaction_start(model):
    return _Redland.librdf_model_transaction_start(model)
librdf_model_transaction_start = _Redland.librdf_model_transaction_start

def librdf_model_transaction_commit(model):
    return _Redland.librdf_model_transaction_commit(model)
librdf_model_transaction_commit = _Redland.librdf_model_transaction_commit

def librdf_model_transaction_rollback(model):
    return _Redland.librdf_model_transaction_rollback(model)
librdf_model_transaction_rollback = _Redland.librdf_model_transaction_rollback

def librdf_new_storage(world, storage_name, name, options_string):
    return _Redland.librdf_new_storage(world, storage_name, name, options_string)
librdf_new_storage = _Redland.librdf_new_storage

def librdf_new_storage_from_storage(old_storage):
    return _Redland.librdf_new_storage_from_storage(old_storage)
librdf_new_storage_from_storage = _Redland.librdf_new_storage_from_storage

def librdf_free_storage(storage):
    return _Redland.librdf_free_storage(storage)
librdf_free_storage = _Redland.librdf_free_storage

def librdf_parser_check_name(world, name):
    return _Redland.librdf_parser_check_name(world, name)
librdf_parser_check_name = _Redland.librdf_parser_check_name

def librdf_new_parser(world, name, mime_type, type_uri):
    return _Redland.librdf_new_parser(world, name, mime_type, type_uri)
librdf_new_parser = _Redland.librdf_new_parser

def librdf_free_parser(parser):
    return _Redland.librdf_free_parser(parser)
librdf_free_parser = _Redland.librdf_free_parser

def librdf_parser_parse_as_stream(parser, uri, inUriorNull=None):
    return _Redland.librdf_parser_parse_as_stream(parser, uri, inUriorNull)
librdf_parser_parse_as_stream = _Redland.librdf_parser_parse_as_stream

def librdf_parser_parse_into_model(parser, uri, inUriOrNull, model):
    return _Redland.librdf_parser_parse_into_model(parser, uri, inUriOrNull, model)
librdf_parser_parse_into_model = _Redland.librdf_parser_parse_into_model

def librdf_parser_parse_string_as_stream(parser, string, base_uri):
    return _Redland.librdf_parser_parse_string_as_stream(parser, string, base_uri)
librdf_parser_parse_string_as_stream = _Redland.librdf_parser_parse_string_as_stream

def librdf_parser_parse_string_into_model(parser, string, base_uri, model):
    return _Redland.librdf_parser_parse_string_into_model(parser, string, base_uri, model)
librdf_parser_parse_string_into_model = _Redland.librdf_parser_parse_string_into_model

def librdf_parser_parse_counted_string_as_stream(parser, string, length, base_uri):
    return _Redland.librdf_parser_parse_counted_string_as_stream(parser, string, length, base_uri)
librdf_parser_parse_counted_string_as_stream = _Redland.librdf_parser_parse_counted_string_as_stream

def librdf_parser_parse_counted_string_into_model(parser, string, length, base_uri, model):
    return _Redland.librdf_parser_parse_counted_string_into_model(parser, string, length, base_uri, model)
librdf_parser_parse_counted_string_into_model = _Redland.librdf_parser_parse_counted_string_into_model

def librdf_parser_get_feature(parser, feature):
    return _Redland.librdf_parser_get_feature(parser, feature)
librdf_parser_get_feature = _Redland.librdf_parser_get_feature

def librdf_parser_set_feature(parser, feature, value):
    return _Redland.librdf_parser_set_feature(parser, feature, value)
librdf_parser_set_feature = _Redland.librdf_parser_set_feature

def librdf_parser_guess_name(mime_type, buffer, identifier):
    return _Redland.librdf_parser_guess_name(mime_type, buffer, identifier)
librdf_parser_guess_name = _Redland.librdf_parser_guess_name

def librdf_parser_guess_name2(world, mime_type, buffer, identifier):
    return _Redland.librdf_parser_guess_name2(world, mime_type, buffer, identifier)
librdf_parser_guess_name2 = _Redland.librdf_parser_guess_name2

def librdf_parser_get_namespaces_seen_prefix(parser, offset):
    return _Redland.librdf_parser_get_namespaces_seen_prefix(parser, offset)
librdf_parser_get_namespaces_seen_prefix = _Redland.librdf_parser_get_namespaces_seen_prefix

def librdf_parser_get_namespaces_seen_uri(parser, offset):
    return _Redland.librdf_parser_get_namespaces_seen_uri(parser, offset)
librdf_parser_get_namespaces_seen_uri = _Redland.librdf_parser_get_namespaces_seen_uri

def librdf_parser_get_namespaces_seen_count(parser):
    return _Redland.librdf_parser_get_namespaces_seen_count(parser)
librdf_parser_get_namespaces_seen_count = _Redland.librdf_parser_get_namespaces_seen_count

def librdf_new_query(world, name, arg3, query_string, arg5):
    return _Redland.librdf_new_query(world, name, arg3, query_string, arg5)
librdf_new_query = _Redland.librdf_new_query

def librdf_new_query_from_query(old_query):
    return _Redland.librdf_new_query_from_query(old_query)
librdf_new_query_from_query = _Redland.librdf_new_query_from_query

def librdf_free_query(query):
    return _Redland.librdf_free_query(query)
librdf_free_query = _Redland.librdf_free_query

def librdf_query_execute(query, model):
    return _Redland.librdf_query_execute(query, model)
librdf_query_execute = _Redland.librdf_query_execute

def librdf_query_get_limit(query):
    return _Redland.librdf_query_get_limit(query)
librdf_query_get_limit = _Redland.librdf_query_get_limit

def librdf_query_set_limit(query, limit):
    return _Redland.librdf_query_set_limit(query, limit)
librdf_query_set_limit = _Redland.librdf_query_set_limit

def librdf_query_get_offset(query):
    return _Redland.librdf_query_get_offset(query)
librdf_query_get_offset = _Redland.librdf_query_get_offset

def librdf_query_set_offset(query, offset):
    return _Redland.librdf_query_set_offset(query, offset)
librdf_query_set_offset = _Redland.librdf_query_set_offset

def librdf_query_results_as_stream(query_results):
    return _Redland.librdf_query_results_as_stream(query_results)
librdf_query_results_as_stream = _Redland.librdf_query_results_as_stream

def librdf_query_results_get_count(query_results):
    return _Redland.librdf_query_results_get_count(query_results)
librdf_query_results_get_count = _Redland.librdf_query_results_get_count

def librdf_query_results_next(query_results):
    return _Redland.librdf_query_results_next(query_results)
librdf_query_results_next = _Redland.librdf_query_results_next

def librdf_query_results_finished(query_results):
    return _Redland.librdf_query_results_finished(query_results)
librdf_query_results_finished = _Redland.librdf_query_results_finished

def librdf_query_results_get_binding_value(query_results, offset):
    return _Redland.librdf_query_results_get_binding_value(query_results, offset)
librdf_query_results_get_binding_value = _Redland.librdf_query_results_get_binding_value

def librdf_query_results_get_binding_name(query_results, offset):
    return _Redland.librdf_query_results_get_binding_name(query_results, offset)
librdf_query_results_get_binding_name = _Redland.librdf_query_results_get_binding_name

def librdf_query_results_get_binding_value_by_name(query_results, name):
    return _Redland.librdf_query_results_get_binding_value_by_name(query_results, name)
librdf_query_results_get_binding_value_by_name = _Redland.librdf_query_results_get_binding_value_by_name

def librdf_query_results_get_bindings_count(query_results):
    return _Redland.librdf_query_results_get_bindings_count(query_results)
librdf_query_results_get_bindings_count = _Redland.librdf_query_results_get_bindings_count

def librdf_query_results_to_file(query_results, name, format_uri, base_uri):
    return _Redland.librdf_query_results_to_file(query_results, name, format_uri, base_uri)
librdf_query_results_to_file = _Redland.librdf_query_results_to_file

def librdf_query_results_to_file2(query_results, name, mime_type, format_uri, base_uri):
    return _Redland.librdf_query_results_to_file2(query_results, name, mime_type, format_uri, base_uri)
librdf_query_results_to_file2 = _Redland.librdf_query_results_to_file2

def librdf_query_results_to_string(query_results, format_uri, base_uri):
    return _Redland.librdf_query_results_to_string(query_results, format_uri, base_uri)
librdf_query_results_to_string = _Redland.librdf_query_results_to_string

def librdf_query_results_to_string2(query_results, name, mime_type, format_uri, base_uri):
    return _Redland.librdf_query_results_to_string2(query_results, name, mime_type, format_uri, base_uri)
librdf_query_results_to_string2 = _Redland.librdf_query_results_to_string2

def librdf_free_query_results(query_results):
    return _Redland.librdf_free_query_results(query_results)
librdf_free_query_results = _Redland.librdf_free_query_results

def librdf_query_results_is_bindings(query_results):
    return _Redland.librdf_query_results_is_bindings(query_results)
librdf_query_results_is_bindings = _Redland.librdf_query_results_is_bindings

def librdf_query_results_is_boolean(query_results):
    return _Redland.librdf_query_results_is_boolean(query_results)
librdf_query_results_is_boolean = _Redland.librdf_query_results_is_boolean

def librdf_query_results_is_graph(query_results):
    return _Redland.librdf_query_results_is_graph(query_results)
librdf_query_results_is_graph = _Redland.librdf_query_results_is_graph

def librdf_query_results_is_syntax(query_results):
    return _Redland.librdf_query_results_is_syntax(query_results)
librdf_query_results_is_syntax = _Redland.librdf_query_results_is_syntax

def librdf_query_results_get_boolean(query_results):
    return _Redland.librdf_query_results_get_boolean(query_results)
librdf_query_results_get_boolean = _Redland.librdf_query_results_get_boolean

def librdf_serializer_check_name(world, name):
    return _Redland.librdf_serializer_check_name(world, name)
librdf_serializer_check_name = _Redland.librdf_serializer_check_name

def librdf_new_serializer(world, name, mime_type, type_uri):
    return _Redland.librdf_new_serializer(world, name, mime_type, type_uri)
librdf_new_serializer = _Redland.librdf_new_serializer

def librdf_free_serializer(serializer):
    return _Redland.librdf_free_serializer(serializer)
librdf_free_serializer = _Redland.librdf_free_serializer

def librdf_serializer_serialize_stream_to_file(serializer, name, base_uri, stream):
    return _Redland.librdf_serializer_serialize_stream_to_file(serializer, name, base_uri, stream)
librdf_serializer_serialize_stream_to_file = _Redland.librdf_serializer_serialize_stream_to_file

def librdf_serializer_serialize_model_to_file(serializer, name, inUriOrNull, model):
    return _Redland.librdf_serializer_serialize_model_to_file(serializer, name, inUriOrNull, model)
librdf_serializer_serialize_model_to_file = _Redland.librdf_serializer_serialize_model_to_file

def librdf_serializer_serialize_stream_to_string(serializer, base_uri, stream):
    return _Redland.librdf_serializer_serialize_stream_to_string(serializer, base_uri, stream)
librdf_serializer_serialize_stream_to_string = _Redland.librdf_serializer_serialize_stream_to_string

def librdf_serializer_serialize_model_to_string(serializer, inUriOrNull, model):
    return _Redland.librdf_serializer_serialize_model_to_string(serializer, inUriOrNull, model)
librdf_serializer_serialize_model_to_string = _Redland.librdf_serializer_serialize_model_to_string

def librdf_serializer_get_feature(serializer, feature):
    return _Redland.librdf_serializer_get_feature(serializer, feature)
librdf_serializer_get_feature = _Redland.librdf_serializer_get_feature

def librdf_serializer_set_feature(serializer, feature, value):
    return _Redland.librdf_serializer_set_feature(serializer, feature, value)
librdf_serializer_set_feature = _Redland.librdf_serializer_set_feature

def librdf_serializer_set_namespace(serializer, nspace, prefix):
    return _Redland.librdf_serializer_set_namespace(serializer, nspace, prefix)
librdf_serializer_set_namespace = _Redland.librdf_serializer_set_namespace

def librdf_free_stream(stream):
    return _Redland.librdf_free_stream(stream)
librdf_free_stream = _Redland.librdf_free_stream

def librdf_stream_end(stream):
    return _Redland.librdf_stream_end(stream)
librdf_stream_end = _Redland.librdf_stream_end

def librdf_stream_next(stream):
    return _Redland.librdf_stream_next(stream)
librdf_stream_next = _Redland.librdf_stream_next

def librdf_stream_get_object(stream):
    return _Redland.librdf_stream_get_object(stream)
librdf_stream_get_object = _Redland.librdf_stream_get_object

def librdf_stream_get_context(stream):
    return _Redland.librdf_stream_get_context(stream)
librdf_stream_get_context = _Redland.librdf_stream_get_context

def librdf_log_message_code(message):
    return _Redland.librdf_log_message_code(message)
librdf_log_message_code = _Redland.librdf_log_message_code

def librdf_log_message_level(message):
    return _Redland.librdf_log_message_level(message)
librdf_log_message_level = _Redland.librdf_log_message_level

def librdf_log_message_facility(message):
    return _Redland.librdf_log_message_facility(message)
librdf_log_message_facility = _Redland.librdf_log_message_facility

def librdf_log_message_message(message):
    return _Redland.librdf_log_message_message(message)
librdf_log_message_message = _Redland.librdf_log_message_message

def librdf_log_message_locator(message):
    return _Redland.librdf_log_message_locator(message)
librdf_log_message_locator = _Redland.librdf_log_message_locator

def raptor_locator_line(locator):
    return _Redland.raptor_locator_line(locator)
raptor_locator_line = _Redland.raptor_locator_line

def raptor_locator_column(locator):
    return _Redland.raptor_locator_column(locator)
raptor_locator_column = _Redland.raptor_locator_column

def raptor_locator_byte(locator):
    return _Redland.raptor_locator_byte(locator)
raptor_locator_byte = _Redland.raptor_locator_byte

def raptor_locator_file(locator):
    return _Redland.raptor_locator_file(locator)
raptor_locator_file = _Redland.raptor_locator_file

def raptor_locator_uri(locator):
    return _Redland.raptor_locator_uri(locator)
raptor_locator_uri = _Redland.raptor_locator_uri

def librdf_internal_test_error(world):
    return _Redland.librdf_internal_test_error(world)
librdf_internal_test_error = _Redland.librdf_internal_test_error

def librdf_internal_test_warning(world):
    return _Redland.librdf_internal_test_warning(world)
librdf_internal_test_warning = _Redland.librdf_internal_test_warning

def librdf_python_world_init(world):
    return _Redland.librdf_python_world_init(world)
librdf_python_world_init = _Redland.librdf_python_world_init
# This file is compatible with both classic and new-style classes.

cvar = _Redland.cvar
librdf_short_copyright_string = cvar.librdf_short_copyright_string
librdf_copyright_string = cvar.librdf_copyright_string
librdf_version_string = cvar.librdf_version_string
librdf_version_major = cvar.librdf_version_major
librdf_version_minor = cvar.librdf_version_minor
librdf_version_release = cvar.librdf_version_release
librdf_version_decimal = cvar.librdf_version_decimal
raptor_version_string = cvar.raptor_version_string
raptor_version_major = cvar.raptor_version_major
raptor_version_minor = cvar.raptor_version_minor
raptor_version_release = cvar.raptor_version_release
raptor_version_decimal = cvar.raptor_version_decimal
rasqal_version_string = cvar.rasqal_version_string
rasqal_version_major = cvar.rasqal_version_major
rasqal_version_minor = cvar.rasqal_version_minor
rasqal_version_release = cvar.rasqal_version_release
rasqal_version_decimal = cvar.rasqal_version_decimal

